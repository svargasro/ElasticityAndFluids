# -*- coding: utf-8 -*-
"""SolucionElementosFinitos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HKWHQK3UPvAyJdZIILougaRSXRS7-FPp
"""

import numpy as np
from scipy.integrate import quad
import matplotlib.pyplot as plt

#Se definen las constantes del código.
li = 0 #Longitud inicial de estudio.
lf= 1/2 #Longitud final de estudio.
n=500 #Número de intervalos.
dx = (lf - li)/n #Delta x, ancho del intervalo.
W=1 #Peso
L = 2*lf #Longitud total
F=1 #Fuerza F.


#Se tiene que para n intervalos, se cumple:
numMatrices = n
tamañoMatriz = n+1

#Se crea uns lista para almacenar las matrices.
lMatricesLocales = [0 for _ in range(n)]

for i in range(0,n):
  matrizLocal = np.zeros((tamañoMatriz,tamañoMatriz))
  matrizLocal[i+1][i+1] = matrizLocal[i][i] = 1/dx
  matrizLocal[i][i+1] = matrizLocal[i+1][i] = -1/dx
  lMatricesLocales[i] = matrizLocal

matricesLocales = np.array(lMatricesLocales)

# print(f'{matricesLocales=}')


matrizGlobal = np.sum(matricesLocales, axis=0)

# print(f'{matrizGlobal=}')

##############################################RHS

def subida(x,m):
  return ((-W/L)*np.power(x,2)/2 + (W+F)*x/2)*(x - m*dx)/dx

def bajada(x,m):
  return ((-W/L)*np.power(x,2)/2 + (W+F)*x/2)*(-x + (m)*dx)/dx

rhsMS = np.zeros((n+1,1))
rhsMB = np.zeros((n+1,1))

for i in range(n):
  rhsMB[i] = quad(bajada ,i*dx ,(i+1)*dx, args=((i+1),))[0]
  rhsMS[i+1] = quad(subida , i*dx,(i+1)*dx, args=(i,))[0]

# print(f'{rhsMB=}')
# print(f'{rhsMS=}')

rhsM = -(rhsMB + rhsMS)
matrizGlobalReducida = matrizGlobal[1:,1:]
rhsMReducida = rhsM[1:]

# print(f'{rhsMReducida=}')
X = np.linalg.solve(matrizGlobalReducida,rhsMReducida)
# print(f'{np.dot(matrizGlobalReducida,X)=}')

xFinal = np.insert(X,0,0)


def etaAnalitica(x):
  return -(W/L)*np.power(x,4)/12 + (W+F)*np.power(x,3)/12 - (W*np.power(L,2)/48 + F*np.power(L,2)/16)*x

xAnalitica = np.arange(0,lf,0.01)


xApprox = np.linspace(0,lf,n+1)

plt.plot(xAnalitica, etaAnalitica(xAnalitica), label='Analítica')
plt.plot(xApprox,xFinal,'bo',label='Aproximada')
plt.legend()
plt.savefig(f'Figura{n}.pdf')

